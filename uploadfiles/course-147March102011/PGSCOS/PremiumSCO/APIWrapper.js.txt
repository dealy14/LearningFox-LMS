var _Debug = false;  // set this to false to turn debugging off
var _DebugSet = false;  // set this to false to turn debugging off
// and get rid of those annoying alert boxes.

// Define exception/error codes
var _NoError = 0;
var _GeneralException = 101;
var _InvalidArgumentError = 201;
var _NotInitialized = 301;
var _NotImplementedError = 401;



//  doLMSInitialize()
function doLMSInitialize()
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSInitialize was not successful.");
      return false;
   }

   // call the LMSInitialize function that should be implemented by the API
   var emptyString = new String("");
   var initResult = api.LMSInitialize(emptyString);
   if (initResult.toString() != "true")
   {
      // LMSInitialize did not complete successfully.

      // Note: An assumption is made that if LMSInitialize returns a non-true
      //     value, then and only then, an error was raised.

      // Note: Each function could define its own error handler, but we'll
      // just implement a generic one in this example.
//      var err = ErrorHandler();
        return false;
   }

   return initResult;

}

//  doLMSFinish()
function doLMSFinish()
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSFinish was not successful.");
   }
   else
   {
      // call the LMSInitialize function that should be implemented by the API
      var emptyString = new String("");
      var result = api.LMSFinish(emptyString);
      //result is a string of true or false
      //if(result=="true") {alert('commit ok');}
      //var err = ErrorHandler();
   }

   return;

}

// Performs the LMSGetValue for all supplied name/value pairs
//  LMSGetValue(NameArguments)
function doLMSGetValue(NameArguments,GetType)
 {
	var api = getAPIHandle();
	if (api == null)
	 {
		alert("Unable to locate the LMS's API Implementation.\nLMSGetValue was not successful.");
		return null;
	 }
	else
	 {
	 	if (_Debug == true)
		 {
			alert('LMSGetValue\nVar inits');
		 }
		//Flag used to decide whether to set the Transmitted field in the student tables
		var TransmitIt = 'YES';
		//the value returned from the LMS
		var answer = "";
		//the value returned from the error handler
		var err = "";
		var intObjNum = 0;
		var SCORM_Name = "";
		var args = NameArguments.split(",");
		var temp = new String("");
		var tempArgHolder = "";
		for (var i=0; i<(args.length); i+=2)
		 {
			temp = args[i].toLowerCase();
			//holds the argument name passed in from flash
			tempArgHolder = args[i];
			if((temp.indexOf("objective_n",0)) == 0)
			 {
				args[i] = args[i].substr(0,11);
				intObjNum = args[i].substr(12,((args[i].length) - 11));
			 }
			switch(args[i].toLowerCase())
			 {
				case 'interaction_n': //n=_level0/:questionnumber
					var intIdNum = args[i+1];  //the -n- of the interaction elements
					break;
				default://catch for everything else
					SCORM_Name = ReturnScormName(args[i],intIdNum, intObjNum);
					break;
			 }
			if ((SCORM_Name != "INVALID") && (SCORM_Name != ""))
			{
				//call to the LMS to Get the value
				answer = api.LMSGetValue(SCORM_Name);
				//reset the holders
				SCORM_Name  = "";
				//check to see if any errors occured
				err = api.LMSGetLastError();
				if (err == 0)
				 {
					if (GetType != "LAUNCH")
					 {
						FlashUpdateVariable("_level0/:" + tempArgHolder, answer);
					 }
					return answer;
				 }
				else
				 {
					return null;
				 }
			 } //end of if SCORM stuff
		 } //end of for loop
	 } //end of api if
}



// Performs the LMSSetValue for all supplied name/value pairs
//  doLMSSetValue(NameValueArguments,SetType)
function doLMSSetValue(NameValueArguments,SetType,SCOType)
 {
	var api = getAPIHandle();
	if (api == null)
	 {
		alert("Unable to locate the LMS's API Implementation.\nLMSSetValue was not successful.");
	 }
	else
	 {
		//Flag used to decide whether to set the Transmitted field in the student tables
		var TransmitIt = 'YES';
		//the value returned from the LMS
		var answer = "";
		//the value returned from the error handler
		var err = "";
		var intObjNum = 0;
		var SCORM_Name = "";
		var SCORM_Value = "";
		var args = NameValueArguments.split(",");
		var temp = "";
		for (var i=0; i<(args.length); i+=2)
		 {
			temp = args[i].toLowerCase();
			//holds the argument name passed in from flash
			tempArgHolder = args[i];
			if((temp.indexOf("objective_n",0)) == 0)
			 {
				args[i] = args[i].substr(0,11);
				intObjNum++;
			 }
			switch(args[i].toLowerCase())
			 {
				case 'interaction_n': //n=_level0/:questionnumber
					var intIdNum = (args[i+1]) - 1;  //the -n- of the interaction elements
					break;
				default://catch for everything else
					SCORM_Name = ReturnScormName(args[i],intIdNum, intObjNum);
					SCORM_Value = ReturnScormValue(args[i],intIdNum,args[i+1],SCOType);
					break;
			 }
			if (_Debug == true)
			 {
				alert('LMSSetValue\nSCORM_Name:' + SCORM_Name + '\nSCORM_Value:' + SCORM_Value);
			 }
			if ((SCORM_Name != "INVALID") && (SCORM_Name != ""))
			{
				//call to the LMs to set the element/value pair
				answer = api.LMSSetValue(SCORM_Name , SCORM_Value);
				if (_DebugSet == true)
				 {
					alert('LMSSetValue\nName:' + SCORM_Name + '\nValue:' + SCORM_Value);
				 }
				//reset the holders
				SCORM_Name  = SCORM_Value = "";
				//check to see if any errors occured
				err = api.LMSGetLastError();
				//For debugging purposes
				if ((err == 0) || (err == 401))
				 {
					//do nothing for now, leave blank for later
				 }
				else
				 {
					if (_Debug == true)
					 {
						alert('LMSSetValue Error\n' + err);
					 }
					//Flag to NOT mark off the transmitted field in the student tables
					TransmitIt = 'NO'
				 }
			 } //end of if SCORM stuff
		 } //end of for loop
		CheckSetType(SetType, TransmitIt);
	 } //end if api if
}

function CheckSetType(SetType,TransmitIt)
 {
	 if (_DebugSet == true)
	 {
		alert('LMSSetValue\nInside CheckSetType');
	 }
	var CallLocation;
	var GotoLocation;
	var GotoName;
	switch(SetType)
	 {
		case 'NORMAL':
			CallLocation = '_level0/';
			GotoLocation = '_level0/Done';
			GotoName = 'NextOn';
			break;
		case 'EXIT':
			CallLocation = '_level0/';
			GotoLocation = '_level0/EXIT';
			GotoName = 'EXIT';
			break;
		case 'PERFORM':
			CallLocation = '_level0/Performance';
			GotoLocation = '_level0/Performance';
			GotoName = 'IsMoreQuestions';
			break;
		case 'LEAVEEXIT':
			doLMSFinish("");
			return;
			break;
		default: //put one even though there shouldn't be a need for it
			if (_Debug == true)
			 {
				alert('LMSSetValue\nSetType:' + SetType);
			 }
			return;
			break;
	 }
	if (TransmitIt=='YES')
	 {
		FlashCallScript(CallLocation, 'SetTransmit');
	 }
	FlashGotoLabel(GotoLocation,GotoName);
 }


// Takes the passed in variable name and returns the SCORM equivalent
//	strVarName = the variable name that needs to be changed to the SCORM equivalent
//	intIdNum = the identifying "n" for interactions
//	intObjNum = the identifying "n" for objectives
function ReturnScormName(strVarName,intIdNum,intObjNum)
 {
	var SCORM_Name = "";
	switch(strVarName.toLowerCase())
	 {
		case 'interaction_id': //id=_level0/:questionid
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.id';
			break;
		case 'objective_n': //objective_n=_level0/:Objective_ID or multiple ids
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.objectives.' + intObjNum + '.id';
			break;
		case 'answer_id': //answer_id," & _level0/:answer_ID
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.student_response';
			break;
		case 'result'://result=_level0/:result
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.result';
			break;
		case 'weighting':
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.weighting';
			break;
		case 'type':
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.type';
			break;
		case 'answer_time'://when the question was answered
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.time';
			break;
		case 'answer_latency'://how long to answer the question
			SCORM_Name = 'cmi.interactions.' + intIdNum + '.latency';
			break;
		case 'lesson_location': 
			SCORM_Name = 'cmi.core.lesson_location';
			break;
		case 'lesson_status':
			SCORM_Name = 'cmi.core.lesson_status';
			break;
		case 'score':
			SCORM_Name = 'cmi.core.score.raw';
			break;
		case 'max':
			SCORM_Name = 'cmi.core.score.max';
			break;
		case 'min':
			SCORM_Name = 'cmi.core.score.min';
			break;
		case 'session_time':
			SCORM_Name = 'cmi.core.session_time';
			break;
		case 'exit':
			SCORM_Name = 'cmi.core.exit';
			break;
		case 'core_children':
			SCORM_Name = 'cmi.core._children';
			break;
		case 'student_id':
			SCORM_Name = 'cmi.core.student_id';
			break;
		case 'student_name':
			SCORM_Name = 'cmi.core.student_name';
			break;
		case 'credit':
			SCORM_Name = 'cmi.core.credit';
			break;
		case 'entry':
			SCORM_Name = 'cmi.core.entry';
			break;
		case 'score_children':
			SCORM_Name = 'cmi.core.score._children';
			break;
		case 'total_time':
			SCORM_Name = 'cmi.core.total_time';
			break;
		case 'suspend_data':
			SCORM_Name = 'cmi.suspend_data';
			break;
		case 'launch_data':
			SCORM_Name = 'cmi.launch_data';
			break;
		default://catch for everything else
			SCORM_Name = 'INVALID';
			break;
	 }
	return SCORM_Name;
 }


// Takes the passed in variable name and value and returns the SCORM equivalent
//	strVarName = the variable name that needs to be changed to the SCORM equivalent
//	intIdNum = the identifying "n" for interactions
//	varValue = the value to set to SCORM standards
//	temp = reserved for future use
function ReturnScormValue(strVarName,intIdNum,varValue,SCOType)
 {
	var SCORM_Value = "";
	switch(strVarName.toLowerCase())
	 {
		case 'interaction_id': //id=_level0/:questionid
			SCORM_Value = varValue;
			break;
		case 'objective_id': //objective_id=_level0/:Objective_ID - ObjectiveID
			SCORM_Value = varValue;
			break;
		case 'answer_id': //answer_id," & _level0/:answer_ID - AnswerText or Selected
			SCORM_Value = varValue;
			break;
		case 'result'://result=_level0/:result - C or W
			switch (varValue.toLowerCase())
			 {
				case 'correct':
				case 'wrong':
				case 'unanticipated':
				case 'neutral':
					SCORM_Value = varValue;
					break;
				case 'c':
					SCORM_Value = 'correct';
					break;
				case 'w':
					SCORM_Value = 'wrong';
					break;
				default:
					SCORM_Value = 'choice';
					break;
			 }
			break;
		case 'weighting':
			SCORM_Value = (varValue != "") ? varValue : '1';
			break;
		case 'type':
			switch (varValue)
			 {
				case 'true-false':
				case 'choice':
				case 'fill-in':
				case 'matching':
				case 'performance':
				case 'sequencing':
				case 'likert':
				case 'numeric':
					SCORM_Value = varValue;
					break;
				default:
					SCORM_Value = 'choice';
					break;
			 }
			break;
		case 'answer_time':
			SCORM_Value = varValue;
			break;
		case 'answer_latency':
			SCORM_Value = varValue;
			break;
		case 'lesson_location': 
			SCORM_Value = varValue;
			break;
		case 'lesson_status':
			if(SCOType == "TEST")
			 {
				switch (varValue.toLowerCase())
				 {
					case 'browsed':
					case 'not attempted':
						SCORM_Value = varValue;
						break;
					case 'passed':
					case 'pass':
					case 'completed':
					case 'c':
						SCORM_Value = 'passed';
						break;
					case 'failed':
					case 'fail':
					case 'incomplete':
						SCORM_Value = 'failed';
						break;
					default:
						SCORM_Value = 'failed';
						break;
				 }
			 }
			else
			 {
				switch (varValue.toLowerCase())
				 {
					case 'passed':
					case 'completed':
					case 'failed':
					case 'incomplete':
					case 'browsed':
					case 'not attempted':
						SCORM_Value = varValue;
						break;
					case 'c':
						SCORM_Value = 'completed';
						break;
					default:
						SCORM_Value = 'incomplete';
						break;
				 }
			 }
			break;
		case 'score':
			SCORM_Value = varValue;
			break;
		case 'max':
			SCORM_Value = (VarValue != "") ? VarValue : '100';
			break;
		case 'min':
			SCORM_Value = (VarValue != "") ? VarValue : '100';
			break;
		case 'session_time':
				// Min requirement == HH:MM:SS
				// Max requirement == HHHH:MM:SS.SS
			SCORM_Value = varValue;
			break;
		case 'exit':
			switch (varValue)
			 {
				case 'time-out':
				case 'suspend':
				case 'logout':
					SCORM_Value = varValue;
					break;
				default:
					SCORM_Value = "";
					break;
			 }
			break;
		default://catch for everything else
			SCORM_Value = "";
			break;
	 }
	return SCORM_Value;
 }

//  doLMSCommit()
function doLMSCommit()
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSCommit was not successful.");
   }
   else
   {
      // call the LMSInitialize function that should be implemented by the API
      var emptyString = new String("");
      var result = api.LMSCommit(emptyString);
      //result is a string of true or false
      //if(result=="true") {alert('commit ok');}
      //var err = ErrorHandler();
   }

   return;

}

//  doLMSGetLastError()
function doLMSGetLastError()
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSGetLastError was not successful.");
      //since we can't get the error code from the LMS, return a general error
      return _GeneralError;
   }


   return api.LMSGetLastError().toString();

}

//  doLMSGetErrorString(errorCode)
function doLMSGetErrorString(errorCode)
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSGetErrorString was not successful.");
   }

   return api.LMSGetErrorString(errorCode).toString();

}

//  doLMSGetDiagnostic(errorCode)
function doLMSGetDiagnostic(errorCode)
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSGetDiagnostic was not successful.");
   }

   return api.LMSGetDiagnostic(errorCode).toString();

}

//  LMSIsInitialized()
function LMSIsInitialized()
{
   // there is no direct method for determining if the LMS API is initialized
   // for example an LMSIsInitialized function defined on the API so we'll try
   // a simple LMSGetValue and trap for the LMS Not Initialized Error

   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nLMSIsInitialized() failed.");
      // no choice but to return false.
      return false;
   }
   else
   {
      var value = api.LMSGetValue("cmi.core.student_name");
      var errCode = api.LMSGetLastError().toString();
      if (errCode == _NotInitialized)
      {
         return false;
      }
      else
      {
         return true;
      }
   }
}

//  ErrorHandler()
function ErrorHandler()
{
   var api = getAPIHandle();
   if (api == null)
   {
      alert("Unable to locate the LMS's API Implementation.\nCannot determine LMS error code.");
      return;
   }

   // check for errors caused by or from the LMS
   var errCode = api.LMSGetLastError().toString();
   if (errCode != _NoError)
   {
      // an error was encountered so display the error description
      var errDescription = api.LMSGetErrorString(errCode);

      if (_Debug == true)
      {
         errDescription += "\n";
         errDescription += api.LMSGetDiagnostic(null);
         // by passing null to LMSGetDiagnostic, we get any available diagnostics
         // on the previous error.
      }

      alert(errDescription);
   }

   return errCode;
}

//window object reference passed in
function getAPIHandle()
{
	return findAPI(window);
}

function findAPI(win)
{
    var API = null;

if (win.API != null)
  {
	API = win.API;
  }
else
  {
	//variable used to loop through the frames collection
	var x = 0;
	while ((win.frames[x] != null) && (API == null))
	  {
		if (win.frames[x].API != null)
		  {
			API = win.frames[x].API;
		  }
		x++;
	  }
  }
  if((win.parent != null) && (win.parent != win) && (API == null))
    {
		API = findAPI(win.parent);
	}
  if((win.opener != null) && (typeof(win.opener) != "undefined") && (API == null))
    {
		API = findAPI(win.opener);
	}
	return API;
}

function CloseCourseScreen()
 {
	if ((top.opener != null) && (typeof(top.opener) != "undefined"))
	 {
		top.close();
	 }
	else
	 {
		alert('closeme');
	 }
 }